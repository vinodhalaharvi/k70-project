!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADC_CFG1_MODE_10_11_BIT	potentiometerdriver.h	14;"	d
ADC_CFG1_MODE_10_11_BIT	thermistordriver.h	13;"	d
ADC_CFG1_MODE_12_13_BIT	potentiometerdriver.h	13;"	d
ADC_CFG1_MODE_12_13_BIT	thermistordriver.h	12;"	d
ADC_CFG1_MODE_16_BIT	potentiometerdriver.h	15;"	d
ADC_CFG1_MODE_16_BIT	thermistordriver.h	14;"	d
ADC_CFG1_MODE_8_9_BIT	potentiometerdriver.h	12;"	d
ADC_CFG1_MODE_8_9_BIT	thermistordriver.h	11;"	d
ADC_CHANNEL_POTENTIOMETER	potentiometerdriver.h	9;"	d
ADC_CHANNEL_TEMPERATURE_SENSOR	potentiometerdriver.h	10;"	d
ADC_CHANNEL_TEMPERATURE_SENSOR	thermistordriver.h	9;"	d
ADC_CHANNEL_THERMISTOR	thermistordriver.h	8;"	d
ADC_SC3_AVGS_32_SAMPLES	potentiometerdriver.h	16;"	d
ADC_SC3_AVGS_32_SAMPLES	thermistordriver.h	15;"	d
ALIGN_SIZE	mymalloc.c	12;"	d	file:
BLKSIZE	file.h	3;"	d
CAPACITIVEPAD	io.h	/^    CAPACITIVEPAD,$/;"	e	enum:__anon4
CAPACITIVEPAD1	io.h	/^    CAPACITIVEPAD1,$/;"	e	enum:__anon5
CAPACITIVEPAD2	io.h	/^    CAPACITIVEPAD2,$/;"	e	enum:__anon5
CAPACITIVEPAD3	io.h	/^    CAPACITIVEPAD3,$/;"	e	enum:__anon5
CAPACITIVEPAD4	io.h	/^    CAPACITIVEPAD4 $/;"	e	enum:__anon5
CHAR_EOF	main.c	41;"	d	file:
DDR_CR00_DDRCLS_DDR	sdram.h	36;"	d
DDR_CR00_DDRCLS_DDR2	sdram.h	38;"	d
DDR_CR00_DDRCLS_LPDDR	sdram.h	37;"	d
DDR_CR09_BSTLEN_2_WORDS	sdram.h	40;"	d
DDR_CR09_BSTLEN_4_WORDS	sdram.h	41;"	d
DDR_CR09_BSTLEN_8_WORDS	sdram.h	42;"	d
DDR_CR30_INTSTAT_ANY_MASK	sdram.h	61;"	d
DDR_CR30_INTSTAT_ANY_SHIFT	sdram.h	60;"	d
DDR_CR30_INTSTAT_CAS_3_ERROR_MASK	sdram.h	53;"	d
DDR_CR30_INTSTAT_CAS_3_ERROR_SHIFT	sdram.h	52;"	d
DDR_CR30_INTSTAT_DDR2_AND_MOBILE_EN_MASK	sdram.h	51;"	d
DDR_CR30_INTSTAT_DDR2_AND_MOBILE_EN_SHIFT	sdram.h	50;"	d
DDR_CR30_INTSTAT_DFI_INT_COMPLETE_CHANGE_MASK	sdram.h	57;"	d
DDR_CR30_INTSTAT_DFI_INT_COMPLETE_CHANGE_SHIFT	sdram.h	56;"	d
DDR_CR30_INTSTAT_DLL_RESYNC_FINISH_MASK	sdram.h	59;"	d
DDR_CR30_INTSTAT_DLL_RESYNC_FINISH_SHIFT	sdram.h	58;"	d
DDR_CR30_INTSTAT_DRAM_INIT_COMPLETE_MASK	sdram.h	49;"	d
DDR_CR30_INTSTAT_DRAM_INIT_COMPLETE_SHIFT	sdram.h	48;"	d
DDR_CR30_INTSTAT_MULTIPLE_OUTSIDE_MASK	sdram.h	47;"	d
DDR_CR30_INTSTAT_MULTIPLE_OUTSIDE_SHIFT	sdram.h	46;"	d
DDR_CR30_INTSTAT_SINGLE_OUTSIDE_MASK	sdram.h	45;"	d
DDR_CR30_INTSTAT_SINGLE_OUTSIDE_SHIFT	sdram.h	44;"	d
DDR_CR30_INTSTAT_WRITE_FINISH_MASK	sdram.h	55;"	d
DDR_CR30_INTSTAT_WRITE_FINISH_SHIFT	sdram.h	54;"	d
DDR_PAD_CTRL_PAD_ODT_CS0_150_OHMS	sdram.h	28;"	d
DDR_PAD_CTRL_PAD_ODT_CS0_50_OHMS	sdram.h	29;"	d
DDR_PAD_CTRL_PAD_ODT_CS0_75_OHMS	sdram.h	27;"	d
DDR_PAD_CTRL_PAD_ODT_CS0_ODT_DISABLED	sdram.h	26;"	d
DDR_PAD_CTRL_SPARE_DLY_CTRL_10_BUFFERS	sdram.h	34;"	d
DDR_PAD_CTRL_SPARE_DLY_CTRL_4_BUFFERS	sdram.h	32;"	d
DDR_PAD_CTRL_SPARE_DLY_CTRL_7_BUFFERS	sdram.h	33;"	d
DDR_PAD_CTRL_SPARE_DLY_CTRL_NO_BUFFER	sdram.h	31;"	d
DOUBLELINKEDLIST_H	file.h	2;"	d
ELECTRODE_COUNT	capacitivepadsdriver.c	22;"	d	file:
Electrode_E1_EN_MASK	capacitivepadsdriver.c	72;"	d	file:
Electrode_E2_EN_MASK	capacitivepadsdriver.c	74;"	d	file:
Electrode_E3_EN_MASK	capacitivepadsdriver.c	76;"	d	file:
Electrode_E4_EN_MASK	capacitivepadsdriver.c	78;"	d	file:
FALSE	potentiometerdriver.h	6;"	d
FALSE	thermistordriver.h	5;"	d
FILE_APPEND	file.h	7;"	d
FILE_CREATE	file.h	6;"	d
FILE_READONLY	file.h	4;"	d
FILE_READWRITE	file.h	5;"	d
IO_H	io.h	2;"	d
LCDC	io.h	/^    LCDC,$/;"	e	enum:__anon4
LCDC1	io.h	/^typedef enum {LCDC1} lcdc_minor_device; $/;"	e	enum:__anon2
LCDCCONSOLE_TAB_STOP_SPACING	lcdcConsole.h	19;"	d
LCDC_ALT2	lcdcdriver.h	61;"	d
LCDC_ALT5	lcdcdriver.h	62;"	d
LCDC_ALT7	lcdcdriver.h	63;"	d
LCDC_BLUE_MASK	lcdcdriver.h	33;"	d
LCDC_BLUE_SHIFT	lcdcdriver.h	36;"	d
LCDC_BYTES_PER_PIXEL	lcdcdriver.h	28;"	d
LCDC_FRAME_BUFFER_SIZE	lcdcdriver.h	55;"	d
LCDC_FRAME_START_ADDRESS	lcdcdriver.h	54;"	d
LCDC_GREEN_MASK	lcdcdriver.h	32;"	d
LCDC_GREEN_SHIFT	lcdcdriver.h	35;"	d
LCDC_GW_BUFFER_SIZE	lcdcdriver.h	58;"	d
LCDC_GW_START_ADDRESS	lcdcdriver.h	57;"	d
LCDC_GW_XSIZE	lcdcdriver.h	24;"	d
LCDC_GW_YSIZE	lcdcdriver.h	25;"	d
LCDC_PIXEL_BLUE	lcdcdriver.h	42;"	d
LCDC_PIXEL_GREEN	lcdcdriver.h	40;"	d
LCDC_PIXEL_RED	lcdcdriver.h	38;"	d
LCDC_RED_MASK	lcdcdriver.h	31;"	d
LCDC_RED_SHIFT	lcdcdriver.h	34;"	d
LCDC_SCREEN_BACKGROUND_COLOR	lcdcdriver.h	52;"	d
LCDC_SCREEN_FOREGROUND_COLOR	lcdcdriver.h	50;"	d
LCDC_SCREEN_XSIZE	lcdcdriver.h	20;"	d
LCDC_SCREEN_YSIZE	lcdcdriver.h	21;"	d
LED	io.h	/^    LED,$/;"	e	enum:__anon4
LED_BLUE	io.h	/^typedef enum { LED_ORANGE, LED_YELLOW, LED_GREEN, LED_BLUE} led_minor_device;  $/;"	e	enum:__anon6
LED_BLUE_PORTA_BIT	led.h	8;"	d
LED_BLUE_PORTA_BIT	leddriver.h	18;"	d
LED_GREEN	io.h	/^typedef enum { LED_ORANGE, LED_YELLOW, LED_GREEN, LED_BLUE} led_minor_device;  $/;"	e	enum:__anon6
LED_GREEN_PORTA_BIT	led.h	7;"	d
LED_GREEN_PORTA_BIT	leddriver.h	17;"	d
LED_ORANGE	io.h	/^typedef enum { LED_ORANGE, LED_YELLOW, LED_GREEN, LED_BLUE} led_minor_device;  $/;"	e	enum:__anon6
LED_ORANGE_PORTA_BIT	led.h	5;"	d
LED_ORANGE_PORTA_BIT	leddriver.h	15;"	d
LED_YELLOW	io.h	/^typedef enum { LED_ORANGE, LED_YELLOW, LED_GREEN, LED_BLUE} led_minor_device;  $/;"	e	enum:__anon6
LED_YELLOW_PORTA_BIT	led.h	6;"	d
LED_YELLOW_PORTA_BIT	leddriver.h	16;"	d
MAX_DEVICES	io.h	3;"	d
MAX_FILE_DESCRIPTORS	io.h	4;"	d
MAX_FS_ENTRIES	file.c	8;"	d	file:
MCM_CR_DDRSIZE_128_MBYTES	sdram.h	22;"	d
MCM_CR_DDRSIZE_256_MBYTES	sdram.h	23;"	d
MCM_CR_DDRSIZE_512_MBYTES	sdram.h	24;"	d
MCM_CR_DDRSIZE_ADDRESS_TRANSLATION_DISABLED	sdram.h	21;"	d
MEMORY_DATA_PADDING	mymalloc.c	11;"	d	file:
MEMORY_SIZE	mymalloc.h	3;"	d
MYMALLOC_H	mymalloc.h	2;"	d
NUM_OF_CAPACITIVEPADS	capacitivepads.h	5;"	d
NUM_OF_LCDCS	lcdc.h	4;"	d
NUM_OF_LEDS	led.h	3;"	d
NUM_OF_POTENTIOMETERS	potentiometer.h	5;"	d
NUM_OF_PUSHBUTTONS	pushbutton.h	3;"	d
NUM_OF_THERMISTORS	thermistor.h	5;"	d
NUM_OF_UARTS	uart.h	4;"	d
PORT_PCR_MUX_ANALOG	capacitivepadsdriver.c	19;"	d	file:
PORT_PCR_MUX_ANALOG	led.h	11;"	d
PORT_PCR_MUX_ANALOG	leddriver.h	21;"	d
PORT_PCR_MUX_ANALOG	pushbuttondriver.h	19;"	d
PORT_PCR_MUX_GPIO	capacitivepadsdriver.c	20;"	d	file:
PORT_PCR_MUX_GPIO	led.h	14;"	d
PORT_PCR_MUX_GPIO	leddriver.h	24;"	d
PORT_PCR_MUX_GPIO	pushbuttondriver.h	22;"	d
POTENTIOMETER	io.h	/^    POTENTIOMETER,$/;"	e	enum:__anon4
POTENTIOMETER1	io.h	/^typedef enum { POTENTIOMETER1} potentiometer_minor_device;$/;"	e	enum:__anon8
PREDEFINED_DEVICE_MAP	io.h	5;"	d
PROFONT_CHARS_IN_FONT	profont.h	15;"	d
PROFONT_FONT_HEIGHT	profont.h	16;"	d
PROFONT_FONT_WIDTH	profont.h	17;"	d
PUSHBUTTON	io.h	/^    PUSHBUTTON,$/;"	e	enum:__anon4
PUSHBUTTON_SW1	io.h	/^typedef enum { PUSHBUTTON_SW1, PUSHBUTTON_SW2 } pushbutton_minor_device;$/;"	e	enum:__anon7
PUSHBUTTON_SW1_PORTD_BIT	pushbuttondriver.h	15;"	d
PUSHBUTTON_SW2	io.h	/^typedef enum { PUSHBUTTON_SW1, PUSHBUTTON_SW2 } pushbutton_minor_device;$/;"	e	enum:__anon7
PUSHBUTTON_SW2_PORTE_BIT	pushbuttondriver.h	16;"	d
REVE	lcdcdriver.h	17;"	d
SDRAM_END	sdram.h	70;"	d
SDRAM_SIZE	sdram.h	64;"	d
SDRAM_START	sdram.h	67;"	d
SIM_CLKDIV1_OUTDIV_DIVIDE_BY_1	mcg.h	18;"	d
SIM_CLKDIV1_OUTDIV_DIVIDE_BY_10	mcg.h	27;"	d
SIM_CLKDIV1_OUTDIV_DIVIDE_BY_11	mcg.h	28;"	d
SIM_CLKDIV1_OUTDIV_DIVIDE_BY_12	mcg.h	29;"	d
SIM_CLKDIV1_OUTDIV_DIVIDE_BY_13	mcg.h	30;"	d
SIM_CLKDIV1_OUTDIV_DIVIDE_BY_14	mcg.h	31;"	d
SIM_CLKDIV1_OUTDIV_DIVIDE_BY_15	mcg.h	32;"	d
SIM_CLKDIV1_OUTDIV_DIVIDE_BY_16	mcg.h	33;"	d
SIM_CLKDIV1_OUTDIV_DIVIDE_BY_2	mcg.h	19;"	d
SIM_CLKDIV1_OUTDIV_DIVIDE_BY_3	mcg.h	20;"	d
SIM_CLKDIV1_OUTDIV_DIVIDE_BY_4	mcg.h	21;"	d
SIM_CLKDIV1_OUTDIV_DIVIDE_BY_5	mcg.h	22;"	d
SIM_CLKDIV1_OUTDIV_DIVIDE_BY_6	mcg.h	23;"	d
SIM_CLKDIV1_OUTDIV_DIVIDE_BY_7	mcg.h	24;"	d
SIM_CLKDIV1_OUTDIV_DIVIDE_BY_8	mcg.h	25;"	d
SIM_CLKDIV1_OUTDIV_DIVIDE_BY_9	mcg.h	26;"	d
SIM_MCR_DDRCFG_DDR1	sdram.h	18;"	d
SIM_MCR_DDRCFG_DDR2_FULL_STRENGTH	sdram.h	19;"	d
SIM_MCR_DDRCFG_DDR2_HALF_STRENGTH	sdram.h	17;"	d
SIM_MCR_DDRCFG_LPDDR_FULL_STRENGTH	sdram.h	16;"	d
SIM_MCR_DDRCFG_LPDDR_HALF_STRENGTH	sdram.h	15;"	d
SVCCapacitivePadInit	svc.c	/^void __attribute__((naked)) __attribute__((noinline)) SVCCapacitivePadInit(int arg0) {$/;"	f
SVCCapacitivePadInit	svc.c	/^void __attribute__((never_inline)) SVCCapacitivePadInit(int arg0) {$/;"	f
SVCCapacitivePadRead	svc.c	/^int __attribute__((naked)) __attribute__((noinline)) SVCCapacitivePadRead(int arg0) {$/;"	f
SVCCapacitivePadRead	svc.c	/^int __attribute__((never_inline)) SVCCapacitivePadRead(int arg0) {$/;"	f
SVCCreate	svc.c	/^int __attribute__((naked)) __attribute__((noinline)) SVCCreate(char * arg0) {$/;"	f
SVCCreate	svc.c	/^int __attribute__((never_inline)) SVCCreate(char * arg0) {$/;"	f
SVCDelete	svc.c	/^int __attribute__((naked)) __attribute__((noinline)) SVCDelete(char * filepath) {$/;"	f
SVCDelete	svc.c	/^int __attribute__((never_inline)) SVCDelete(char *filepath) {$/;"	f
SVCFClose	svc.c	/^int __attribute__((naked)) __attribute__((noinline)) SVCFClose(int fd) {$/;"	f
SVCFClose	svc.c	/^int __attribute__((never_inline)) SVCFClose(int fd) {$/;"	f
SVCFgetc	svc.c	/^int __attribute__((naked)) __attribute__((noinline)) SVCFgetc(int fd) {$/;"	f
SVCFgetc	svc.c	/^int __attribute__((never_inline)) SVCFgetc(int fd) {$/;"	f
SVCFputc	svc.c	/^int __attribute__((naked)) __attribute__((noinline)) SVCFputc(int ch, int fd) {$/;"	f
SVCFputc	svc.c	/^int __attribute__((never_inline)) SVCFputc(int ch, int fd) {$/;"	f
SVCFree	svc.c	/^void __attribute__((naked)) __attribute__((noinline)) SVCFree(void * arg0) {$/;"	f
SVCFree	svc.c	/^void __attribute__((never_inline)) SVCFree(void * arg0) {$/;"	f
SVCLcdcInit	svc.c	/^void __attribute__((naked)) __attribute__((noinline)) SVCLcdcInit(int arg0) {$/;"	f
SVCLcdcInit	svc.c	/^void __attribute__((never_inline)) SVCLcdcInit(int arg0) {$/;"	f
SVCLcdcWrite	svc.c	/^void __attribute__((naked)) __attribute__((noinline)) SVCLcdcWrite(int arg0, int arg1) {$/;"	f
SVCLcdcWrite	svc.c	/^void __attribute__((never_inline)) SVCLcdcWrite(int arg0, int arg1) {$/;"	f
SVCLedInit	svc.c	/^void __attribute__((naked)) __attribute__((noinline)) SVCLedInit(int arg0) {$/;"	f
SVCLedInit	svc.c	/^void __attribute__((never_inline)) SVCLedInit(int arg0) {$/;"	f
SVCLedWrite	svc.c	/^void __attribute__((naked)) __attribute__((noinline)) SVCLedWrite(int arg0, int arg1) {$/;"	f
SVCLedWrite	svc.c	/^void __attribute__((never_inline)) SVCLedWrite(int arg0, int arg1) {$/;"	f
SVCMalloc	svc.c	/^void * __attribute__((naked)) __attribute__((noinline)) SVCMalloc(unsigned arg0) {$/;"	f
SVCMalloc	svc.c	/^void * __attribute__((never_inline)) SVCMalloc(unsigned arg0) {$/;"	f
SVCMyopen	svc.c	/^int __attribute__((naked)) __attribute__((noinline)) SVCMyopen($/;"	f
SVCMyopen	svc.c	/^int __attribute__((never_inline)) SVCMyopen($/;"	f
SVCPotentiometerInit	svc.c	/^void __attribute__((naked)) __attribute__((noinline)) SVCPotentiometerInit(int arg0) {$/;"	f
SVCPotentiometerInit	svc.c	/^void __attribute__((never_inline)) SVCPotentiometerInit(int arg0) {$/;"	f
SVCPotentiometerRead	svc.c	/^int __attribute__((naked)) __attribute__((noinline)) SVCPotentiometerRead(int arg0) {$/;"	f
SVCPotentiometerRead	svc.c	/^int __attribute__((never_inline)) SVCPotentiometerRead(int arg0) {$/;"	f
SVCPushButtonInit	svc.c	/^void __attribute__((naked)) __attribute__((noinline)) SVCPushButtonInit(int arg0) {$/;"	f
SVCPushButtonInit	svc.c	/^void __attribute__((never_inline)) SVCPushButtonInit(int arg0) {$/;"	f
SVCPushButtonRead	svc.c	/^int __attribute__((naked)) __attribute__((noinline)) SVCPushButtonRead(int arg0) {$/;"	f
SVCPushButtonRead	svc.c	/^int __attribute__((never_inline)) SVCPushButtonRead(int arg0) {$/;"	f
SVCUartInit	svc.c	/^void __attribute__((naked)) __attribute__((noinline)) SVCUartInit(int arg0) {$/;"	f
SVCUartInit	svc.c	/^void __attribute__((never_inline)) SVCUartInit(int arg0) {$/;"	f
SVCUartRead	svc.c	/^int __attribute__((naked)) __attribute__((noinline)) SVCUartRead(int arg0) {$/;"	f
SVCUartRead	svc.c	/^int __attribute__((never_inline)) SVCUartRead(int arg0) {$/;"	f
SVCUartWrite	svc.c	/^void __attribute__((naked)) __attribute__((noinline)) SVCUartWrite(int arg0, int arg1) {$/;"	f
SVCUartWrite	svc.c	/^void __attribute__((never_inline)) SVCUartWrite(int arg0, int arg1) {$/;"	f
SVC_CAPACITIVEPAD_INIT	svc.h	37;"	d
SVC_CAPACITIVEPAD_READ	svc.h	38;"	d
SVC_FILE_CREATE	svc.h	45;"	d
SVC_FILE_DELETE	svc.h	46;"	d
SVC_FREE	svc.h	40;"	d
SVC_LCDC_INIT	svc.h	29;"	d
SVC_LCDC_WRITE	svc.h	30;"	d
SVC_LED_INIT	svc.h	19;"	d
SVC_LED_WRITE	svc.h	20;"	d
SVC_MALLOC	svc.h	39;"	d
SVC_MYCLOSE	svc.h	42;"	d
SVC_MYOPEN	svc.h	41;"	d
SVC_MYREAD	svc.h	43;"	d
SVC_MYWRITE	svc.h	44;"	d
SVC_MaxPriority	svc.h	15;"	d
SVC_POTENTIOMETER_INIT	svc.h	32;"	d
SVC_POTENTIOMETER_READ	svc.h	33;"	d
SVC_PUSHBUTTON_INIT	svc.h	22;"	d
SVC_PUSHBUTTON_READ	svc.h	23;"	d
SVC_PriorityShift	svc.h	16;"	d
SVC_THERMISTOR_INIT	svc.h	35;"	d
SVC_THERMISTOR_READ	svc.h	36;"	d
SVC_UART_INIT	svc.h	25;"	d
SVC_UART_READ	svc.h	27;"	d
SVC_UART_WRITE	svc.h	26;"	d
THERMISTOR	io.h	/^    THERMISTOR,$/;"	e	enum:__anon4
THERMISTOR1	io.h	/^typedef enum { THERMISTOR1} thermistor_minor_device; $/;"	e	enum:__anon9
THRESHOLD_OFFSET	capacitivepadsdriver.c	23;"	d	file:
TRUE	potentiometerdriver.h	7;"	d
TRUE	thermistordriver.h	6;"	d
TSI_Calibrate	capacitivepadsdriver.c	/^void TSI_Calibrate(void) {$/;"	f
TSI_Init	capacitivepadsdriver.c	/^void TSI_Init(void) {$/;"	f
UART	io.h	/^    UART,$/;"	e	enum:__anon4
UART1	io.h	/^typedef enum {UART1} uart_minor_device; $/;"	e	enum:__anon3
UART2_ERROR_INTERRUPT_PRIORITY	uartdriver.h	25;"	d
UART2_ERROR_IRQ_NUMBER	uartdriver.h	23;"	d
UART2_STATUS_INTERRUPT_PRIORITY	uartdriver.h	20;"	d
UART2_STATUS_IRQ_NUMBER	uartdriver.h	18;"	d
XPSR_FRAME_ALIGNED_BIT	svc.c	81;"	d	file:
XPSR_FRAME_ALIGNED_MASK	svc.c	82;"	d	file:
_CAPACITIVEPADDRIVER_H	capacitivepadsdriver.h	2;"	d
_CAPACITIVEPAD_H	capacitivepads.h	4;"	d
_COMMON_H	common.h	2;"	d
_DELAY_H	delay.h	13;"	d
_FILE	io.h	/^    _FILE $/;"	e	enum:__anon4
_LCDCCONSOLE_H	lcdcConsole.h	13;"	d
_LCDCDRIVER_H	lcdcdriver.h	13;"	d
_LCDC_H	lcdc.h	3;"	d
_LEDDRIVER_H	leddriver.h	13;"	d
_LED_H	led.h	2;"	d
_MCG_H	mcg.h	13;"	d
_POTENTIAMETERDRIVER_H	potentiometerdriver.h	2;"	d
_POTENTIOMETER_H	potentiometer.h	4;"	d
_PROFONT_H	profont.h	13;"	d
_PUSHBUTTONDRIVER_H	pushbuttondriver.h	13;"	d
_PUSHBUTTON_H	pushbutton.h	2;"	d
_SDRAM_H	sdram.h	13;"	d
_SVC_H	svc.h	13;"	d
_THERMISTORDRIVER_H	thermistordriver.h	2;"	d
_THERMISTOR_H	thermistor.h	4;"	d
_UARTDRIVER_H	uartdriver.h	13;"	d
_UART_H	uart.h	3;"	d
__STRINGUTILS_H	stringutils.h	3;"	d
_capacitivepad_t	capacitivepads.h	/^typedef struct _capacitivepad_t {$/;"	s
_fdtable_t	io.h	/^typedef struct _fdtable_t {$/;"	s
_file_t	file.h	/^typedef struct _file_t {$/;"	s
_filepath_to_device_t	io.h	/^typedef struct _filepath_to_device_t {$/;"	s
_lcdcd_t	lcdc.h	/^typedef struct _lcdcd_t {$/;"	s
_led_t	led.h	/^typedef struct _led_t {$/;"	s
_mymalloc_t	mymalloc.h	/^typedef struct _mymalloc_t {$/;"	s
_node_t	file.h	/^typedef struct _node_t {$/;"	s
_potentiometer_t	potentiometer.h	/^typedef struct _potentiometer_t {$/;"	s
_pushbutton_t	pushbutton.h	/^typedef struct _pushbutton_t {$/;"	s
_stream_t	io.h	/^typedef struct _stream_t {$/;"	s
_thermistor_t	thermistor.h	/^typedef struct _thermistor_t {$/;"	s
_uart_t	uart.h	/^typedef struct _uart_t {$/;"	s
align	mymalloc.c	/^unsigned align(unsigned value){ $/;"	f
allocblock	file.c	/^void allocblock(node_t *node){ $/;"	f
arg0	svc.c	/^		int arg0;$/;"	m	union:frame::__anon10	file:
arg1	svc.c	/^		int arg1;$/;"	m	union:frame::__anon11	file:
arg2	svc.c	/^		int arg2;$/;"	m	union:frame::__anon12	file:
arg3	svc.c	/^		int arg3;$/;"	m	union:frame::__anon13	file:
assert_memory_is_initialized	mymalloc.c	/^void assert_memory_is_initialized(){ $/;"	f
boolean	common.h	/^typedef enum { false, true } boolean; $/;"	t	typeref:enum:__anon1
calibrate	capacitivepads.h	/^    void (*calibrate)(void); $/;"	m	struct:_capacitivepad_t
capacitivepad_calibrate	capacitivepads.c	/^void capacitivepad_calibrate(void *minor_num){ $/;"	f
capacitivepad_init	capacitivepads.c	/^int capacitivepad_init(void * minor_num){ $/;"	f
capacitivepad_minor_device	io.h	/^} capacitivepad_minor_device; $/;"	t	typeref:enum:__anon5
capacitivepad_read	capacitivepads.c	/^int capacitivepad_read(void *minor_num){ $/;"	f
capacitivepad_t	capacitivepads.h	/^} capacitivepad_t;$/;"	t	typeref:struct:_capacitivepad_t
capacitivepads	capacitivepads.c	/^capacitivepad_t capacitivepads[NUM_OF_CAPACITIVEPADS] = { $/;"	v
cat	io.c	/^void cat(unsigned fd){ $/;"	f
channel	capacitivepadsdriver.c	/^	int channel;$/;"	m	struct:electrodeHW	file:
close_fd	io.c	/^int close_fd(int fd){$/;"	f
console	lcdcConsole.h	/^struct console {$/;"	s
console	lcdcdriver.c	/^static struct console console; $/;"	v	typeref:struct:console	file:
counterRegister	capacitivepadsdriver.c	/^	uint16_t *counterRegister;$/;"	m	struct:electrodeHW	file:
create_fd	io.c	/^int create_fd(int major_num, int minor_num){ $/;"	f
create_file	file.c	/^void create_file(const char * filename){$/;"	f
data	file.h	/^    void * data; $/;"	m	struct:_node_t
data	mymalloc.h	/^    char * data[0]; $/;"	m	struct:_mymalloc_t
defragment_memory	mymalloc.c	/^void defragment_memory(unsigned iterations){ $/;"	f
delay	delay.c	/^void delay(unsigned long int limit) {$/;"	f
delete_file	file.c	/^void delete_file(const char * filename){$/;"	f
device	io.c	/^static struct device {$/;"	s	file:
devices	io.c	/^} devices[MAX_DEVICES] = {$/;"	v	typeref:struct:device	file:
electrodeHW	capacitivepadsdriver.c	/^struct electrodeHW {$/;"	s	file:
electrodeHW	capacitivepadsdriver.c	/^} electrodeHW[ELECTRODE_COUNT] =$/;"	v	typeref:struct:electrodeHW
electrode_in	capacitivepadsdriver.c	/^int electrode_in(int electrodeNumber) {$/;"	f
false	common.h	/^typedef enum { false, true } boolean; $/;"	e	enum:__anon1
fdtable	io.c	/^static fdtable_t fdtable[MAX_FILE_DESCRIPTORS]; $/;"	v	file:
fdtable_t	io.h	/^} fdtable_t;$/;"	t	typeref:struct:_fdtable_t
file_properties	io.c	/^static filepath_to_device_t file_properties[PREDEFINED_DEVICE_MAP] = { $/;"	v	file:
file_t	file.h	/^} file_t;$/;"	t	typeref:struct:_file_t
fileinit	file.c	/^int fileinit(void * minor_num) { $/;"	f
filename	file.h	/^    char * filename; $/;"	m	struct:_file_t
filepath	io.h	/^    const char * filepath; $/;"	m	struct:_filepath_to_device_t
filepath_to_device_t	io.h	/^} filepath_to_device_t;$/;"	t	typeref:struct:_filepath_to_device_t
fileread	file.c	/^int fileread(void *minor_num){$/;"	f
filerelease	file.c	/^int filerelease(void * minor_num){ $/;"	f
fileseek	file.c	/^void fileseek(void *minor_num, unsigned offset){$/;"	f
filesystem	file.c	/^static  file_t * filesystem[MAX_FS_ENTRIES]; $/;"	v	file:
filewrite	file.c	/^int filewrite(int ch, void * minor_num){$/;"	f
frame	svc.c	/^struct frame {$/;"	s	file:
framebuffer	lcdcConsole.h	/^  uint32_t *framebuffer;	\/\/ Starting address of frame buffer in memory$/;"	m	struct:console
free	mymalloc.h	/^    unsigned free; $/;"	m	struct:_mymalloc_t
free_file_memory	file.c	/^void free_file_memory(node_t * node){$/;"	f
get_device_path	io.c	/^const char * get_device_path(unsigned major_num, unsigned minor_num){ $/;"	f
get_fd	io.c	/^int get_fd(int major_num, int minor_num){ $/;"	f
get_file_inode	file.c	/^int get_file_inode(const char * filepath){ $/;"	f
get_major_num	io.c	/^int get_major_num(const char * filepath){ $/;"	f
get_minor_num	io.c	/^int get_minor_num(const char * filepath){ $/;"	f
getcurrentprocessid	mymalloc.c	/^int getcurrentprocessid(){ $/;"	f
getfile	file.c	/^file_t * getfile(void * minor_num){ $/;"	f
height	lcdcConsole.h	/^  uint16_t width, height;	\/\/ Screen width & height (in pixels)$/;"	m	struct:console
hole	mymalloc.c	/^int hole(char * trav){ $/;"	f
init	capacitivepads.h	/^    void (*init)(void); $/;"	m	struct:_capacitivepad_t
init	io.c	/^    int (*init)(void * minor_num); $/;"	m	struct:device	file:
init	lcdc.h	/^    void (*init)(void); $/;"	m	struct:_lcdcd_t
init	led.h	/^    void (*init)(void); $/;"	m	struct:_led_t
init	potentiometer.h	/^    void (*init)(void); $/;"	m	struct:_potentiometer_t
init	pushbutton.h	/^    void (*init)(void); $/;"	m	struct:_pushbutton_t
init	thermistor.h	/^    void (*init)(void); $/;"	m	struct:_thermistor_t
init	uart.h	/^    void (*init)(void); $/;"	m	struct:_uart_t
init_devices_fdtable	io.c	/^void init_devices_fdtable(){ $/;"	f
init_fdtable	io.c	/^void init_fdtable(){ $/;"	f
initmemory	mymalloc.c	/^unsigned initmemory(){ $/;"	f
initmemory_ram	mymalloc.c	/^unsigned initmemory_ram(){ $/;"	f
initmemory_sdram	mymalloc.c	/^unsigned initmemory_sdram(){ $/;"	f
input_present	uart.h	/^    int (*input_present)(void); $/;"	m	struct:_uart_t
is_fd_inuse	io.c	/^int is_fd_inuse(int fd){ $/;"	f
is_memory_initialized	mymalloc.c	/^unsigned is_memory_initialized(){ $/;"	f
isdevice	io.c	/^int isdevice(int major_num) { $/;"	f
isfile	io.c	/^int isfile(int major_num){ $/;"	f
isfileexists	file.c	/^unsigned isfileexists(const char * filepath){ $/;"	f
lcdcConsoleClear	lcdcConsole.c	/^void lcdcConsoleClear(struct console *console) {$/;"	f
lcdcConsoleInit	lcdcConsole.c	/^void lcdcConsoleInit(struct console *console) {$/;"	f
lcdcConsolePutc	lcdcConsole.c	/^void lcdcConsolePutc(struct console *console, int ch) {$/;"	f
lcdcConsoleScroll	lcdcConsole.c	/^void lcdcConsoleScroll(struct console *console) {$/;"	f
lcdcInit	lcdcdriver.c	/^void lcdcInit(void) {$/;"	f
lcdcInitPins	lcdcdriver.c	/^void lcdcInitPins() {$/;"	f
lcdcInitScreen	lcdcdriver.c	/^void lcdcInitScreen() {$/;"	f
lcdc_driver_init	lcdcdriver.c	/^void lcdc_driver_init(void) {$/;"	f
lcdc_driver_write	lcdcdriver.c	/^int lcdc_driver_write(int ch){ $/;"	f
lcdc_init	lcdc.c	/^int lcdc_init(void * minor_num){ $/;"	f
lcdc_minor_device	io.h	/^typedef enum {LCDC1} lcdc_minor_device; $/;"	t	typeref:enum:__anon2
lcdc_t	lcdc.h	/^} lcdc_t;$/;"	t	typeref:struct:_lcdcd_t
lcdc_write	lcdc.c	/^int lcdc_write(int ch, void *minor_num){ $/;"	f
lcdcs	lcdc.c	/^lcdc_t lcdcs[NUM_OF_LCDCS] = { $/;"	v
ledBlueConfig	leddriver.c	/^void ledBlueConfig(void) {$/;"	f
ledBlueOff	leddriver.c	/^void ledBlueOff(void) {$/;"	f
ledBlueOn	leddriver.c	/^void ledBlueOn(void) {$/;"	f
ledBlueWrite	leddriver.c	/^void ledBlueWrite(int ch){$/;"	f
ledGreenConfig	leddriver.c	/^void ledGreenConfig(void) {$/;"	f
ledGreenOff	leddriver.c	/^void ledGreenOff(void) {$/;"	f
ledGreenOn	leddriver.c	/^void ledGreenOn(void) {$/;"	f
ledGreenWrite	leddriver.c	/^void ledGreenWrite(int ch){$/;"	f
ledInit	leddriver.c	/^void ledInit(){ $/;"	f
ledInitAll	leddriver.c	/^void ledInitAll(void) {$/;"	f
ledOrangeConfig	leddriver.c	/^void ledOrangeConfig(void) {$/;"	f
ledOrangeOff	leddriver.c	/^void ledOrangeOff(void) {$/;"	f
ledOrangeOn	leddriver.c	/^void ledOrangeOn(void) {$/;"	f
ledOrangeWrite	leddriver.c	/^void ledOrangeWrite(int ch){$/;"	f
ledYellowConfig	leddriver.c	/^void ledYellowConfig(void) {$/;"	f
ledYellowOff	leddriver.c	/^void ledYellowOff(void) {$/;"	f
ledYellowOn	leddriver.c	/^void ledYellowOn(void) {$/;"	f
ledYellowWrite	leddriver.c	/^void ledYellowWrite(int ch){$/;"	f
led_init	led.c	/^int led_init(void * minor_num){ $/;"	f
led_minor_device	io.h	/^typedef enum { LED_ORANGE, LED_YELLOW, LED_GREEN, LED_BLUE} led_minor_device;  $/;"	t	typeref:enum:__anon6
led_t	led.h	/^} led_t;$/;"	t	typeref:struct:_led_t
led_write	led.c	/^int led_write(int ch, void *minor_num){ $/;"	f
leds	led.c	/^led_t leds[NUM_OF_LEDS] = { $/;"	v
lr	svc.c	/^		int lr;$/;"	m	union:frame::__anon14	file:
ls	file.c	/^void ls(){$/;"	f
main	main.c	/^int main(void) {$/;"	f
major_device	io.h	/^} major_device; $/;"	t	typeref:enum:__anon4
major_num	io.h	/^    int major_num; $/;"	m	struct:_fdtable_t
major_num	io.h	/^    unsigned major_num; $/;"	m	struct:_filepath_to_device_t
majorno	io.h	/^    int majorno; $/;"	m	struct:_stream_t
mask	capacitivepadsdriver.c	/^	uint32_t mask;$/;"	m	struct:electrodeHW	file:
mcgInit	mcg.c	/^void mcgInit(void) {$/;"	f
memory_end	mymalloc.c	/^static char * memory_end; $/;"	v	file:
memorymap	mymalloc.c	/^void memorymap(){ $/;"	f
memoryset	stringutils.c	/^void memoryset(void *memory, char ch, unsigned len){ $/;"	f
merge	mymalloc.c	/^void merge(char * trav){ $/;"	f
minor_num	io.h	/^    int minor_num; $/;"	m	struct:_fdtable_t
minor_num	io.h	/^    unsigned minor_num; $/;"	m	struct:_filepath_to_device_t
minorno	io.h	/^    int minorno; $/;"	m	struct:_stream_t
myassert	common.c	/^void myassert(unsigned status, $/;"	f
myclose	io.c	/^int myclose(int fd){ $/;"	f
myfree	mymalloc.c	/^void myfree(void *addr){ $/;"	f
mymalloc	mymalloc.c	/^void * mymalloc(unsigned size){ $/;"	f
mymalloc_t	mymalloc.h	/^} mymalloc_t;$/;"	t	typeref:struct:_mymalloc_t
myopen	io.c	/^int myopen(const char * filepath, unsigned mode){ $/;"	f
myread	io.c	/^int myread(int fd){ $/;"	f
mystdin	common.c	/^unsigned mystdin; $/;"	v
mystdout	common.c	/^unsigned mystdout; $/;"	v
mywrite	io.c	/^int mywrite(int fd, int ch){ $/;"	f
newfile	file.c	/^file_t * newfile(){ $/;"	f
next	file.h	/^    struct _node_t *next; $/;"	m	struct:_node_t	typeref:struct:_node_t::_node_t
next	mymalloc.c	/^char * next(char *trav){ $/;"	f
node	file.h	/^    node_t *node; $/;"	m	struct:_file_t
node_t	file.h	/^} node_t;$/;"	t	typeref:struct:_node_t
offset	file.h	/^    unsigned offset;$/;"	m	struct:_file_t
pid	mymalloc.h	/^    unsigned pid;$/;"	m	struct:_mymalloc_t
potentiometer_driver_init	potentiometerdriver.c	/^void potentiometer_driver_init(void) {$/;"	f
potentiometer_driver_read	potentiometerdriver.c	/^unsigned int potentiometer_driver_read() {$/;"	f
potentiometer_init	potentiometer.c	/^int potentiometer_init(void * minor_num){ $/;"	f
potentiometer_minor_device	io.h	/^typedef enum { POTENTIOMETER1} potentiometer_minor_device;$/;"	t	typeref:enum:__anon8
potentiometer_read	potentiometer.c	/^int potentiometer_read(void *minor_num){ $/;"	f
potentiometer_t	potentiometer.h	/^} potentiometer_t;$/;"	t	typeref:struct:_potentiometer_t
potentiometers	potentiometer.c	/^potentiometer_t potentiometers[NUM_OF_POTENTIOMETERS] = { $/;"	v
prev	file.h	/^    struct _node_t *prev; $/;"	m	struct:_node_t	typeref:struct:_node_t::_node_t
print_fdtable	io.c	/^void print_fdtable(){ $/;"	f
printnode	mymalloc.c	/^void printnode(char *trav){ $/;"	f
profont	profont.c	/^uint8_t profont[PROFONT_CHARS_IN_FONT][PROFONT_FONT_HEIGHT][PROFONT_FONT_WIDTH] = {$/;"	v
pushbuttonInitAll	pushbuttondriver.c	/^void pushbuttonInitAll(void) {$/;"	f
pushbuttonSW1Config	pushbuttondriver.c	/^void pushbuttonSW1Config(void) {$/;"	f
pushbuttonSW2Config	pushbuttondriver.c	/^void pushbuttonSW2Config(void) {$/;"	f
pushbutton_init	pushbutton.c	/^int pushbutton_init(void * minor_num){$/;"	f
pushbutton_minor_device	io.h	/^typedef enum { PUSHBUTTON_SW1, PUSHBUTTON_SW2 } pushbutton_minor_device;$/;"	t	typeref:enum:__anon7
pushbutton_read	pushbutton.c	/^int pushbutton_read(void * minor_num){$/;"	f
pushbutton_t	pushbutton.h	/^} pushbutton_t;$/;"	t	typeref:struct:_pushbutton_t
pushbuttoninit	pushbuttondriver.c	/^void pushbuttoninit(void){ $/;"	f
pushbuttons	pushbutton.c	/^pushbutton_t pushbuttons[NUM_OF_PUSHBUTTONS] = { $/;"	v
r0	svc.c	/^		int r0;$/;"	m	union:frame::__anon10	file:
r1	svc.c	/^		int r1;$/;"	m	union:frame::__anon11	file:
r12	svc.c	/^	int r12;$/;"	m	struct:frame	file:
r14	svc.c	/^		int r14;$/;"	m	union:frame::__anon14	file:
r2	svc.c	/^		int r2;$/;"	m	union:frame::__anon12	file:
r3	svc.c	/^		int r3;$/;"	m	union:frame::__anon13	file:
read	capacitivepads.h	/^    int  (*read)(int); $/;"	m	struct:_capacitivepad_t
read	io.c	/^    int (*read)(void * minor_num); $/;"	m	struct:device	file:
read	potentiometer.h	/^    unsigned int (*read)(); $/;"	m	struct:_potentiometer_t
read	pushbutton.h	/^    int (*read)(void); $/;"	m	struct:_pushbutton_t
read	thermistor.h	/^    unsigned int (*read)(); $/;"	m	struct:_thermistor_t
read	uart.h	/^    int (*read)(); $/;"	m	struct:_uart_t
reinitalize_memory	mymalloc.c	/^void reinitalize_memory(){ $/;"	f
release	io.c	/^    int (*release)(void * minor_num); $/;"	m	struct:device	file:
returnAddr	svc.c	/^	int returnAddr;$/;"	m	struct:frame	file:
returnVal	svc.c	/^		int returnVal;$/;"	m	union:frame::__anon10	file:
sdramInit	sdram.c	/^void sdramInit(void) {$/;"	f
size	file.h	/^    unsigned size; $/;"	m	struct:_file_t
size	mymalloc.h	/^    unsigned size; $/;"	m	struct:_mymalloc_t
sizeofnode	mymalloc.c	/^unsigned sizeofnode(void * node){ $/;"	f
start	mymalloc.c	/^static char * start; $/;"	v	file:
stralloc	stringutils.c	/^char * stralloc(unsigned len){ $/;"	f
strcompare	stringutils.c	/^unsigned strcompare(const char * s1, const char * s2){ $/;"	f
strcopy	stringutils.c	/^char * strcopy(char * dst, const char * src){ $/;"	f
strduplicate	stringutils.c	/^char * strduplicate(const char * src){ $/;"	f
stream_t	io.h	/^} stream_t;$/;"	t	typeref:struct:_stream_t
strlength	stringutils.c	/^unsigned strlength(const char * string){ $/;"	f
strlrtrim	stringutils.c	/^char * strlrtrim(const char * src){ $/;"	f
strltrim	stringutils.c	/^char * strltrim(const char * src){ $/;"	f
strrtrim	stringutils.c	/^char * strrtrim(const char * src){ $/;"	f
svcHandler	svc.c	/^__asm void svcHandler(void) {$/;"	f
svcHandler	svc.c	/^void __attribute__((naked)) svcHandler(void) {$/;"	f
svcHandlerInC	svc.c	/^void svcHandlerInC(struct frame *framePtr) {$/;"	f
svcInit_SetSVCPriority	svc.c	/^void svcInit_SetSVCPriority(unsigned char priority) {$/;"	f
sw1In	pushbuttondriver.c	/^int sw1In(void) {$/;"	f
sw2In	pushbuttondriver.c	/^int sw2In(void) {$/;"	f
taken	mymalloc.c	/^void taken(char *node, unsigned size){ $/;"	f
thermistor_driver_init	thermistordriver.c	/^void thermistor_driver_init(void) {$/;"	f
thermistor_driver_read	thermistordriver.c	/^unsigned int thermistor_driver_read() {$/;"	f
thermistor_init	thermistor.c	/^int thermistor_init(void * minor_num){ $/;"	f
thermistor_minor_device	io.h	/^typedef enum { THERMISTOR1} thermistor_minor_device; $/;"	t	typeref:enum:__anon9
thermistor_read	thermistor.c	/^int thermistor_read(void *minor_num){ $/;"	f
thermistor_t	thermistor.h	/^} thermistor_t;$/;"	t	typeref:struct:_thermistor_t
thermistors	thermistor.c	/^thermistor_t thermistors[NUM_OF_THERMISTORS] = { $/;"	v
threshold	capacitivepadsdriver.c	/^	uint16_t threshold;$/;"	m	struct:electrodeHW	file:
true	common.h	/^typedef enum { false, true } boolean; $/;"	e	enum:__anon1
uartGetchar	uartdriver.c	/^char uartGetchar(UART_MemMapPtr uartChannel) {$/;"	f
uartGetcharPresent	uartdriver.c	/^int uartGetcharPresent(UART_MemMapPtr uartChannel) {$/;"	f
uartInit	uartdriver.c	/^void uartInit(UART_MemMapPtr uartChannel, int clockInKHz, int baud) {$/;"	f
uartPutchar	uartdriver.c	/^void uartPutchar(UART_MemMapPtr uartChannel, char ch) {$/;"	f
uartPuts	uartdriver.c	/^void uartPuts(UART_MemMapPtr uartChannel, char *p) {$/;"	f
uart_driver_init	uartdriver.c	/^void uart_driver_init(void){$/;"	f
uart_driver_input_present	uartdriver.c	/^int uart_driver_input_present(){ $/;"	f
uart_driver_read	uartdriver.c	/^int uart_driver_read(){$/;"	f
uart_driver_write	uartdriver.c	/^int uart_driver_write(int ch){$/;"	f
uart_driver_writestring	uartdriver.c	/^void uart_driver_writestring(char *string){ $/;"	f
uart_init	uart.c	/^int uart_init(void * minor_num){ $/;"	f
uart_input_present	uart.c	/^int uart_input_present(void *minor_num){ $/;"	f
uart_minor_device	io.h	/^typedef enum {UART1} uart_minor_device; $/;"	t	typeref:enum:__anon3
uart_read	uart.c	/^int uart_read(void *minor_num){ $/;"	f
uart_t	uart.h	/^} uart_t;$/;"	t	typeref:struct:_uart_t
uart_write	uart.c	/^int uart_write(int ch, void *minor_num){ $/;"	f
uarts	uart.c	/^uart_t uarts[NUM_OF_UARTS] = { $/;"	v
uintptr_t	capacitivepads.c	/^typedef unsigned long uintptr_t; $/;"	t	file:
uintptr_t	file.c	/^typedef unsigned long uintptr_t; $/;"	t	file:
uintptr_t	io.c	/^typedef unsigned long uintptr_t; $/;"	t	file:
uintptr_t	led.c	/^typedef unsigned long uintptr_t; $/;"	t	file:
uintptr_t	potentiometer.c	/^typedef unsigned long uintptr_t; $/;"	t	file:
uintptr_t	pushbutton.c	/^typedef unsigned long uintptr_t; $/;"	t	file:
uintptr_t	thermistor.c	/^typedef unsigned long uintptr_t; $/;"	t	file:
uintptr_t	uart.c	/^typedef unsigned long uintptr_t;$/;"	t	file:
verify	capacitivepadsdriver.c	/^int verify(void) {$/;"	f
verify_file_operations	main.c	/^void verify_file_operations(){ $/;"	f
verify_led	main.c	/^int verify_led(void) {$/;"	f
verify_memory_allocation	mymalloc.c	/^void verify_memory_allocation() {$/;"	f
verify_pushbutton	main.c	/^int verify_pushbutton(void) {$/;"	f
verify_uart_lcdc	main.c	/^void verify_uart_lcdc(){ $/;"	f
width	lcdcConsole.h	/^  uint16_t width, height;	\/\/ Screen width & height (in pixels)$/;"	m	struct:console
write	io.c	/^    int (*write)(int ch, void *minor_num); $/;"	m	struct:device	file:
write	lcdc.h	/^    int (*write)(int ch); $/;"	m	struct:_lcdcd_t
write	led.h	/^    void (*write)(int ch); $/;"	m	struct:_led_t
write	uart.h	/^    int (*write)(int ch); $/;"	m	struct:_uart_t
write_string	common.c	/^void write_string(const char *p, unsigned mystdout) {$/;"	f
x	lcdcConsole.h	/^  uint16_t x, y;			\/\/ Current console output position x & y (in pixels)$/;"	m	struct:console
xPSR	svc.c	/^	int xPSR;$/;"	m	struct:frame	file:
y	lcdcConsole.h	/^  uint16_t x, y;			\/\/ Current console output position x & y (in pixels)$/;"	m	struct:console
